Sample  Input :
10 dim a as Integer;
20 dim b as Integer;
30 dim i as String;
40 dim c as Integer;
50 dim f as Integer;
60 let a = 10;
70 let b = 2;
80 let i = dude!!! ;
90 c = a ^ b;
100 c = a ^ b ^ f;
110 c = a * b;
120 c = a * b * c;
130 lcd i;
140 print c;
150 if a <> 1 then;
160 print a;
170 else;
180 print b;
190 end;
200 print a;
210 print b;
220 print a;
230 for a = 1 to 10;
240 if a < 5 then;
250 print a;
260 end;
270 next i;








â€ƒ
Output :
Lexical Analysis :
dim	keyword	-1	1	0	4
a	small	-1	1	4	1
as	keyword	-1	1	6	4
Integer	keyword	-1	1	9	4
dim	keyword	-1	2	0	4
b	small	-1	2	4	1
as	keyword	-1	2	6	4
Integer	keyword	-1	2	9	4
dim	keyword	-1	3	0	4
i	small	-1	3	4	1
as	keyword	-1	3	6	4
String	keyword	-1	3	9	4
dim	keyword	-1	4	0	4
c	small	-1	4	4	1
as	keyword	-1	4	6	4
Integer	keyword	-1	4	9	4
dim	keyword	-1	5	0	4
f	small	-1	5	4	1
as	keyword	-1	5	6	4
Integer	keyword	-1	5	9	4
let	small	-1	6	0	1
a	small	-1	6	4	1
=	operator	assignment	6	6	5
10	number	-1	6	8	2
let	small	-1	7	0	1
b	small	-1	7	4	1
=	operator	assignment	7	6	5
2	number	-1	7	8	2
let	small	-1	8	0	1
i	small	-1	8	4	1
=	operator	assignment	8	6	5
dude!!!	special	-1	8	8	6
	number	-1	8	16	2
c	small	-1	9	0	1
=	operator	assignment	9	2	5
a	small	-1	9	4	1
^	operator	arithimetic	9	6	5
b	small	-1	9	8	1
c	small	-1	10	0	1
=	operator	assignment	10	2	5
a	small	-1	10	4	1
^	operator	arithimetic	10	6	5
b	small	-1	10	8	1
^	operator	arithimetic	10	10	5
f	small	-1	10	12	1
c	small	-1	11	0	1
=	operator	assignment	11	2	5
a	small	-1	11	4	1
*	operator	arithmetic	11	6	5
b	small	-1	11	8	1
c	small	-1	12	0	1
=	operator	assignment	12	2	5
a	small	-1	12	4	1
*	operator	arithmetic	12	6	5
b	small	-1	12	8	1
*	operator	arithmetic	12	10	5
c	small	-1	12	12	1
lcd	keyword	-1	13	0	4
i	small	-1	13	4	1
print	keyword	-1	14	0	4
c	small	-1	14	6	1
if	keyword	-1	15	0	4
a	small	-1	15	3	1
<>	operator	relational	15	5	5
1	number	-1	15	8	2
then	keyword	-1	15	10	4
print	keyword	-1	16	0	4
a	small	-1	16	6	1
else	keyword	-1	17	0	4
print	keyword	-1	18	0	4
b	small	-1	18	6	1
end	keyword	-1	19	0	4
print	keyword	-1	20	0	4
a	small	-1	20	6	1
print	keyword	-1	21	0	4
b	small	-1	21	6	1
print	keyword	-1	22	0	4
a	small	-1	22	6	1
for	keyword	-1	23	0	4
a	small	-1	23	4	1
=	operator	assignment	23	6	5
1	number	-1	23	8	2
to	keyword	-1	23	10	4
10	number	-1	23	13	2



Intermediate Code Generation (TA C):

let a = 10 
let b = 2 
let i = dude!!!  
temporary=1
temp1 = temporary < b
Label-1:
if temp1 = false then goto Label-2
Increase temporary
temp2 = temp2 * a
GOTO Label-1
Label-2:
c = temp2
temporary=1
temp2 = temporary < b
Label-2:
if temp2 = false then goto Label-3
Increase temporary
temp3 = temp3 * a
GOTO Label-2
Label-3:
c = temp3
c = a * b 
c = a * b * c 
lcd i 
print c 
temp5 = a <> 1
if temp5 = false then goto Label-5
print a 
Label-5: 
print b 

print a 
print b 
print a 
a=1
temp6 = a > 10
Label-6:
if temp6 = false then goto 
Increase temp6
if a < 5 then 
print a 
